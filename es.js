function guessTz(){if("undefined"==typeof Intl||void 0===Intl.DateTimeFormat)return fallbackTZ;let format=Intl.DateTimeFormat();if(void 0===format||void 0===format.resolvedOptions)return fallbackTZ;let timezone=format.resolvedOptions().timeZone;return timezone&&(timezone.indexOf("/")>-1||"UTC"===timezone)?timezone:fallbackTZ}function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports}function isDate(d){return"[object Date]"===Object.prototype.toString.call(d)&&!isNaN(d.valueOf())}function isArray(input){return"[object Array]"===Object.prototype.toString.call(input)}function isObject(input){return"[object Object]"===Object.prototype.toString.call(input)}function zeroPad(str,len){return(str+="").length>=(len=len||2)?str:new Array(len-str.length+1).join("0")+str}function titleCase(str){return str?str[0].toUpperCase()+str.substr(1).toLowerCase():""}function ordinal(i){let j=i%10,k=i%100;return 1===j&&11!==k?i+"st":2===j&&12!==k?i+"nd":3===j&&13!==k?i+"rd":i+"th"}function normalize(str){return str=str.toLowerCase(),"day"===(str=str.replace(/s$/,""))?"date":str}function getEpoch(tmp){return"number"==typeof tmp?tmp:isDate(tmp)?tmp.getTime():tmp.epoch?tmp.epoch:null}function toString(d){return zeroPad(d.getMonth()+1)+"/"+zeroPad(d.getDate())+":"+zeroPad(d.getHours())}function shouldChange(s,m){if(!0!==m.hasDst||!m.change.start||!m.change.back)return!1;let current=toString(new Date(s.epoch));return current>=m.change.start&&current<m.change.back}function timezone(s){let tz=s.tz;if(!data_1[tz])return console.warn("Warn: could not find given or local timezone - '"+tz+"'"),{current:{epochShift:0}};let m={name:tz,hasDst:Boolean(data_1[tz].dst),hemisphere:"s"===data_1[tz].h?"South":"North",change:{},current:{}};if(!0===m.hasDst){let arr=parseDst(data_1[tz].dst);m.change={start:arr[0],back:arr[1]}}let summer=data_1[tz].o,winter=summer;return!0===m.hasDst&&(winter="North"===m.hemisphere?summer-1:data_1[tz].o+1),!1===m.hasDst?(m.current.offset=summer,m.current.isDST=!1):!0===shouldChange(s,m)?(m.current.offset=summer,m.current.isDST="North"===m.hemisphere):(m.current.offset=winter,m.current.isDST="South"===m.hemisphere),m}function walkTo(s,wants){let keys=Object.keys(units),old=s.clone();for(let i=0;i<keys.length;i++){let k=keys[i],n=wants[k];if(void 0===n&&(n=old[k]()),"string"==typeof n&&(n=parseInt(n,10)),!units[k].valid(n))return s.valid=!1,s.epoch=null,void console.warn("invalid "+k+": "+n);units[k].walkTo(s,n)}void 0===wants.hour&&s.hour()!==old.hour()&&s.hour(old.hour())}function buildMapping(){const obj={};for(let i=0;i<shortMonths.length;i++)obj[shortMonths[i]]=i;for(let i=0;i<longMonths.length;i++)obj[longMonths[i]]=i;return obj}function parseInput(s,input){if("number"!=typeof input){if(s.epoch=Date.now(),null!==input&&void 0!==input)if(!0!==isDate(input))if(!0!==isArray(input)){if(!0===isObject(input))return input.epoch?void(s.epoch=input.epoch):void handleObject(s,input);if("string"==typeof input){for(let i=0;i<strFmt.length;i++){let m=input.match(strFmt[i].reg);if(m)return void strFmt[i].parse(s,m)}s.epoch=null,s.valid=!1}}else handleArray(s,input);else s.epoch=input.getTime()}else s.epoch=input}function unixFmt(str,s){let chars=str.split(""),arr=[chars[0]],quoteOn=!1;for(let i=1;i<chars.length;i+=1){if("'"===chars[i]){if(!0!==(quoteOn=!quoteOn)||!chars[i+1]||"'"!==chars[i+1])continue;quoteOn=!0}!0===quoteOn||chars[i]===arr[arr.length-1][0]?arr[arr.length-1]+=chars[i]:arr.push(chars[i])}return arr.reduce((txt,c)=>(void 0!==mapping[c]?txt+=mapping[c](s)||"":txt+=c,txt),"")}function format(s,str){if(!0!==s.isValid())return"";if(fmt&&fmt[str])return fmt[str](s);if("string"==typeof str)return unixFmt(str,s);return Object.keys(fmt).reduce((h,k)=>(h[k]=fmt[k](s),h),{})}function progress(s){let obj={};return["year","season","quarter","month","week","day","quarterHour","hour","minute"].forEach(k=>{let start=s.clone().startOf(k),duration=s.clone().endOf(k).epoch-start.epoch,percent=(s.epoch-start.epoch)/duration;obj[k]=parseFloat(percent.toFixed(2))}),obj}function nearest(s,unit){unit=(unit=unit.toLowerCase()).replace(/s$/,"");let prog=s.progress();return void 0!==prog[unit]?(prog[unit]>.5&&s.add(1,unit),s.startOf(unit)):console.warn("no known unit '"+unit+"'"),s}function climb(a,b,unit){let i=0;for(a=a.clone();a.isBefore(b);)a.add(1,unit),i+=1;return a.isSame(b,unit)||(i-=1),i}function diff(a,b,unit){return unit=fns.normalize(unit),a.isBefore(b)?climb(a,b,unit):-1*climb(b,a,unit)}function startOf(s,unit){return units$1[unit]?units$1[unit](s):"summer"===unit||"winter"===unit?(s.season(unit),units$1.season(s)):s}function endOf(s,unit){return units$1[unit]?((s=units$1[unit](s)).add(1,unit),s.subtract(1,"milliseconds"),s):s}function addMethods(Space){Object.keys(methods$2).forEach(k=>{Space.prototype[k]=methods$2[k]}),Object.keys(destructive).forEach(k=>{Space.prototype[k]=destructive[k]}),Object.keys(tricky).forEach(k=>{Space.prototype[k]=tricky[k]})}function rollMonth(want,old){if(want.month>0){let years=parseInt(want.month/12,10);want.year=old.year()+years,want.month=want.month%12}else if(want.month<0){let years=Math.floor(Math.abs(want.month)/13,10);years=Math.abs(years)+1,want.year=old.year()-years,want.month=want.month%12,want.month=want.month+12,12===want.month&&(want.month=0)}return want}function addMethods$1(SpaceTime){SpaceTime.prototype.add=function(num,unit){let old=this.clone();unit=fns.normalize(unit),o[unit]?this.epoch+=o[unit]*num:"week"===unit?this.epoch+=o.day*(7*num):"quarter"===unit||"season"===unit?this.epoch+=o.month*(4*num):"season"===unit?this.epoch+=o.month*(4*num):"quarterhour"===unit&&(this.epoch+=15*o.minute);let want={};if(keep[unit]&&keep[unit].forEach(u=>{want[u]=old[u]()}),"month"===unit?(want.month=old.month()+num,want=rollMonth(want,old)):"date"===unit&&0!==num&&old.isSame(this,"day")?want.date=old.date()+num:"year"===unit&&this.year()===old.year()&&(this.epoch+=o.week),keepDate[unit]){let max=monthLength[want.month];want.date=old.date(),want.date>max&&(want.date=max)}return walkTo(this,want),this},SpaceTime.prototype.subtract=function(num,unit){return this.add(-1*num,unit),this}}function addMethods$2(SpaceTime){SpaceTime.prototype.isSame=function(b,unit){return"string"!=typeof b&&"number"!=typeof b||(b=new SpaceTime(b,this.timezone.name)),unit=unit.replace(/s$/,""),print[unit]?print[unit](this)===print[unit](b):null}}function addMethods$3(SpaceTime){const methods={isAfter:function(d){let epoch=fns.getEpoch(d);return null===epoch?null:this.epoch>epoch},isBefore:function(d){let epoch=fns.getEpoch(d);return null===epoch?null:this.epoch<epoch},isEqual:function(d){let epoch=fns.getEpoch(d);return null===epoch?null:this.epoch===epoch},isBetween:function(start,end){let startEpoch=fns.getEpoch(start);if(null===startEpoch)return null;let endEpoch=fns.getEpoch(end);return null===endEpoch?null:startEpoch<this.epoch&&this.epoch<endEpoch}};Object.keys(methods).forEach(k=>{SpaceTime.prototype[k]=methods[k]})}function addMethods$4(SpaceTime){const methods={i18n:function(data){if(!(fns.isObject(data)&&fns.isObject(data.days)&&fns.isObject(data.months)&&fns.isArray(data.days.short)&&fns.isArray(data.days.long)&&fns.isArray(data.months.short)&&fns.isArray(data.months.long)))throw new Error("Invalid i18n payload passed.");days.set(data.days),months.set(data.months)}};Object.keys(methods).forEach(k=>{SpaceTime.prototype[k]=methods[k]})}function SpaceTime(input,tz){this.tz=tz||guessTz(),this.valid=!0,Object.defineProperty(this,"d",{get:function(){let meta=timezone(this)||{},shift=(new Date(this.epoch).getTimezoneOffset()||0)+60*meta.current.offset;shift=60*shift*1e3;let epoch=this.epoch+shift;return new Date(epoch)}}),parseInput(this,input)}function whereIts(a,b){let start=new SpaceTime(null),end=new SpaceTime(null);start.time(a),b?end.time(b):end=start.clone().add(59,"minutes");let startHour=start.hour(),endHour=end.hour();return Object.keys(data_1).filter(tz=>{let m=new SpaceTime(null,tz),hour=m.hour();return hour>=startHour&&hour<=endHour&&(!(hour===startHour&&m.minute()<start.minute())&&!(hour===endHour&&m.minute()>end.minute()))})}function clobber(instance){return["add","subtract","hour","date","day","month","quarter","goto"].forEach(prop=>{Object.defineProperty(instance,prop,{enumerable:!1,value(...args){var copy=instance.clone();return copy[prop].apply(copy,args)}})}),instance}function ImmutableSpacetime(...args){var instance=clobber(new SpaceTime(...args));return instance.clone=(x=>clobber(new SpaceTime(...args))),instance}const fallbackTZ="Canada/Pacific";var Africa={Abidjan:[0,"n"],Accra:[0,"n"],Addis_Ababa:[3,"n"],Algiers:[1,"n"],Asmara:[3,"n"],Asmera:[3,"n"],Bamako:[0,"n"],Bangui:[1,"n"],Banjul:[0,"n"],Bissau:[0,"n"],Blantyre:[2,"n"],Brazzaville:[1,"n"],Bujumbura:[2,"n"],Cairo:[2,"n"],Casablanca:[1,"n","07/02:03->10/29:02"],Ceuta:[2,"n","03/26:03->10/29:02"],Conakry:[0,"n"],Dakar:[0,"n"],Dar_es_Salaam:[3,"n"],Djibouti:[3,"n"],Douala:[1,"n"],El_Aaiun:[1,"n","07/02:03->10/29:02"],Freetown:[0,"n"],Gaborone:[2,"s"],Harare:[2,"s"],Johannesburg:[2,"s"],Juba:[3,"n"],Kampala:[3,"n"],Khartoum:[3,"n"],Kigali:[2,"n"],Kinshasa:[1,"s"],Lagos:[1,"n"],Libreville:[1,"n"],Lome:[0,"n"],Luanda:[1,"s"],Lubumbashi:[2,"s"],Lusaka:[2,"s"],Malabo:[1,"n"],Maputo:[2,"s"],Maseru:[2,"s"],Mbabane:[2,"s"],Mogadishu:[3,"n"],Monrovia:[0,"n"],Nairobi:[3,"n"],Ndjamena:[1,"n"],Niamey:[1,"n"],Nouakchott:[0,"n"],Ouagadougou:[0,"n"],"Porto-Novo":[1,"n"],Sao_Tome:[0,"n"],Timbuktu:[0,"n"],Tripoli:[2,"n"],Tunis:[1,"n"],Windhoek:[1,"s","04/02:01->09/03:03"]},America={Adak:[-9,"n","03/12:03->11/05:01"],Anchorage:[-8,"n","03/12:03->11/05:01"],Anguilla:[-4,"n"],Antigua:[-4,"n"],Araguaina:[-3,"n"],Argentina:[-3,"s"],Aruba:[-4,"n"],Asuncion:[-4,"s","03/25:23->10/01:01"],Atikokan:[-5,"n"],Atka:[-9,"n","03/12:03->11/05:01"],Bahia:[-3,"n"],Bahia_Banderas:[-5,"n","04/02:03->10/29:01"],Barbados:[-4,"n"],Belem:[-3,"n"],Belize:[-6,"n"],"Blanc-Sablon":[-4,"n"],Boa_Vista:[-4,"n"],Bogota:[-5,"n"],Boise:[-6,"n","03/12:03->11/05:01"],Buenos_Aires:[-3,"s"],Cambridge_Bay:[-6,"n","03/12:03->11/05:01"],Campo_Grande:[-4,"s","02/18:23->10/15:01"],Cancun:[-5,"n"],Caracas:[-4,"n"],Catamarca:[-3,"n"],Cayenne:[-3,"n"],Cayman:[-5,"n"],Chicago:[-5,"n","03/12:03->11/05:01"],Chihuahua:[-6,"n","04/02:03->10/29:01"],Coral_Harbour:[-5,"n"],Cordoba:[-3,"s"],Costa_Rica:[-6,"n"],Creston:[-7,"n"],Cuiaba:[-4,"s","02/18:23->10/15:01"],Curacao:[-4,"n"],Danmarkshavn:[0,"n"],Dawson:[-7,"n","03/12:03->11/05:01"],Dawson_Creek:[-7,"n"],Denver:[-6,"n","03/12:03->11/05:01"],Detroit:[-4,"n","03/12:03->11/05:01"],Dominica:[-4,"n"],Edmonton:[-6,"n","03/12:03->11/05:01"],Eirunepe:[-5,"n"],El_Salvador:[-6,"n"],Ensenada:[-7,"n","03/12:03->11/05:01"],Fort_Wayne:[-4,"n","03/12:03->11/05:01"],Fortaleza:[-3,"n"],Glace_Bay:[-3,"n","03/12:03->11/05:01"],Godthab:[-3,"n","03/25:23->10/28:22"],Goose_Bay:[-3,"n","03/12:03->11/05:01"],Grand_Turk:[-4,"n"],Grenada:[-4,"n"],Guadeloupe:[-4,"n"],Guatemala:[-6,"n"],Guayaquil:[-5,"n"],Guyana:[-4,"n"],Halifax:[-3,"n","03/12:03->11/05:01"],Havana:[-4,"n","03/12:01->11/05:00"],Hermosillo:[-7,"n"],Indiana:[-4,"n","03/12:03->11/05:01"],Indianapolis:[-4,"n","03/12:03->11/05:01"],Inuvik:[-6,"n","03/12:03->11/05:01"],Iqaluit:[-4,"n","03/12:03->11/05:01"],Jamaica:[-5,"n"],Jujuy:[-3,"n"],Juneau:[-8,"n","03/12:03->11/05:01"],Kentucky:[-4,"n","03/12:03->11/05:01"],Knox_IN:[-5,"n","03/12:03->11/05:01"],Kralendijk:[-4,"n"],La_Paz:[-4,"s"],Lima:[-5,"s"],Los_Angeles:[-7,"n","03/12:03->11/05:01"],Louisville:[-4,"n","03/12:03->11/05:01"],Lower_Princes:[-4,"n"],Maceio:[-3,"n"],Managua:[-6,"n"],Manaus:[-4,"s"],Marigot:[-4,"n"],Martinique:[-4,"n"],Matamoros:[-5,"n","03/12:03->11/05:01"],Mazatlan:[-6,"n","04/02:03->10/29:01"],Mendoza:[-3,"n"],Menominee:[-5,"n","03/12:03->11/05:01"],Merida:[-5,"n","04/02:03->10/29:01"],Metlakatla:[-8,"n","03/12:03->11/05:01"],Mexico_City:[-5,"n","04/02:03->10/29:01"],Miquelon:[-2,"n","03/12:03->11/05:01"],Moncton:[-3,"n","03/12:03->11/05:01"],Monterrey:[-5,"n","04/02:03->10/29:01"],Montevideo:[-3,"s"],Montreal:[-4,"n","03/12:03->11/05:01"],Montserrat:[-4,"n"],Nassau:[-4,"n","03/12:03->11/05:01"],New_York:[-4,"n","03/12:03->11/05:01"],Nipigon:[-4,"n","03/12:03->11/05:01"],Nome:[-8,"n","03/12:03->11/05:01"],Noronha:[-2,"n"],North_Dakota:[-5,"n","03/12:03->11/05:01"],Ojinaga:[-6,"n","03/12:03->11/05:01"],Panama:[-5,"n"],Pangnirtung:[-4,"n","03/12:03->11/05:01"],Paramaribo:[-3,"n"],Phoenix:[-7,"n"],"Port-au-Prince":[-4,"n"],Port_of_Spain:[-4,"n"],Porto_Acre:[-5,"n"],Porto_Velho:[-4,"n"],Puerto_Rico:[-4,"n"],Rainy_River:[-5,"n","03/12:03->11/05:01"],Rankin_Inlet:[-5,"n","03/12:03->11/05:01"],Recife:[-3,"n"],Regina:[-6,"n"],Resolute:[-5,"n","03/12:03->11/05:01"],Rio_Branco:[-5,"n"],Rosario:[-3,"n"],Santa_Isabel:[-7,"n","03/12:03->11/05:01"],Santarem:[-3,"n"],Santiago:[-4,"s","05/13:23->08/13:01"],Santo_Domingo:[-4,"n"],Sao_Paulo:[-3,"s","02/18:23->10/15:01"],Scoresbysund:[0,"n","03/26:01->10/29:00"],Shiprock:[-6,"n","03/12:03->11/05:01"],Sitka:[-8,"n","03/12:03->11/05:01"],St_Barthelemy:[-4,"n"],St_Johns:[-2.5,"n","03/12:03->11/05:01"],St_Kitts:[-4,"n"],St_Lucia:[-4,"n"],St_Thomas:[-4,"n"],St_Vincent:[-4,"n"],Swift_Current:[-6,"n"],Tegucigalpa:[-6,"n"],Thule:[-3,"n","03/12:03->11/05:01"],Thunder_Bay:[-4,"n","03/12:03->11/05:01"],Tijuana:[-7,"n","03/12:03->11/05:01"],Toronto:[-4,"n","03/12:03->11/05:01"],Tortola:[-4,"n"],Vancouver:[-7,"n","03/12:03->11/05:01"],Virgin:[-4,"n"],Whitehorse:[-7,"n","03/12:03->11/05:01"],Winnipeg:[-5,"n","03/12:03->11/05:01"],Yakutat:[-8,"n","03/12:03->11/05:01"],Yellowknife:[-6,"n","03/12:03->11/05:01"]},Antarctica={Casey:[8,"s"],Davis:[7,"s"],DumontDUrville:[10,"s"],Macquarie:[11,"s"],Mawson:[5,"s"],McMurdo:[12,"s","04/02:02->09/24:03"],Palmer:[-4,"s","05/13:23->08/13:01"],Rothera:[-3,"s"],South_Pole:[12,"s","04/02:02->09/24:03"],Syowa:[3,"s"],Troll:[2,"s","03/26:03->10/29:01"],Vostok:[6,"s"]},Arctic={Longyearbyen:[2,"n","03/26:03->10/29:02"]},Asia={Aden:[3,"n"],Almaty:[6,"n"],Amman:[3,"n","03/31:01->10/27:00"],Anadyr:[12,"n"],Aqtau:[5,"n"],Aqtobe:[5,"n"],Ashgabat:[5,"n"],Ashkhabad:[5,"n"],Baghdad:[3,"n"],Bahrain:[3,"n"],Baku:[5,"n"],Bangkok:[7,"n"],Barnaul:[7,"n"],Beirut:[3,"n","03/26:01->10/28:23"],Bishkek:[6,"n"],Brunei:[8,"n"],Calcutta:[5.5,"n"],Chita:[10,"n"],Choibalsan:[8,"n","03/25:03->09/29:23"],Chongqing:[8,"n"],Chungking:[8,"n"],Colombo:[5.5,"n"],Dacca:[6,"n"],Damascus:[3,"n","03/31:01->10/26:23"],Dhaka:[6,"n"],Dili:[9,"s"],Dubai:[4,"n"],Dushanbe:[5,"n"],Gaza:[3,"n","03/25:02->10/28:00"],Harbin:[8,"n"],Hebron:[3,"n","03/25:02->10/28:00"],Ho_Chi_Minh:[7,"n"],Hong_Kong:[8,"n"],Hovd:[7,"n","03/25:03->09/29:23"],Irkutsk:[9,"n"],Istanbul:[3,"n"],Jakarta:[7,"s"],Jayapura:[9,"n"],Jerusalem:[3,"n","03/24:03->10/29:01"],Kabul:[4.5,"n"],Kamchatka:[13,"n"],Karachi:[5,"n"],Kashgar:[6,"n"],Kathmandu:[5.75,"n"],Katmandu:[5.75,"n"],Khandyga:[10,"n"],Kolkata:[5.5,"n"],Krasnoyarsk:[8,"n"],Kuala_Lumpur:[8,"s"],Kuching:[8,"n"],Kuwait:[3,"n"],Macao:[8,"n"],Macau:[8,"n"],Magadan:[12,"n"],Makassar:[8,"s"],Manila:[8,"n"],Muscat:[4,"n"],Nicosia:[3,"n","03/26:04->10/29:03"],Novokuznetsk:[7,"n"],Novosibirsk:[7,"n"],Omsk:[7,"n"],Oral:[5,"n"],Phnom_Penh:[7,"n"],Pontianak:[7,"n"],Pyongyang:[9,"n"],Qatar:[3,"n"],Qyzylorda:[6,"n"],Rangoon:[6.5,"n"],Riyadh:[3,"n"],Saigon:[7,"n"],Sakhalin:[11,"n"],Samarkand:[5,"n"],Seoul:[9,"n"],Shanghai:[8,"n"],Singapore:[8,"s"],Srednekolymsk:[12,"n"],Taipei:[8,"n"],Tashkent:[5,"n"],Tbilisi:[4,"n"],Tehran:[4.5,"n","03/22:01->09/21:23"],Tel_Aviv:[3,"n","03/24:03->10/29:01"],Thimbu:[6,"n"],Thimphu:[6,"n"],Tokyo:[9,"n"],Ujung_Pandang:[8,"n"],Ulaanbaatar:[8,"n","03/25:03->09/29:23"],Ulan_Bator:[8,"n","03/25:03->09/29:23"],Urumqi:[6,"n"],"Ust-Nera":[11,"n"],Vientiane:[7,"n"],Vladivostok:[11,"n"],Yakutsk:[10,"n"],Yekaterinburg:[6,"n"],Yerevan:[4,"n"]},Atlantic={Azores:[0,"n","03/26:01->10/29:00"],Bermuda:[-3,"n","03/12:03->11/05:01"],Canary:[1,"n","03/26:02->10/29:01"],Cape_Verde:[-1,"n"],Faeroe:[1,"n","03/26:02->10/29:01"],Faroe:[1,"n","03/26:02->10/29:01"],Jan_Mayen:[2,"n","03/26:03->10/29:02"],Madeira:[1,"n","03/26:02->10/29:01"],Reykjavik:[0,"n"],South_Georgia:[-2,"n"],St_Helena:[0,"n"],Stanley:[-3,"n"]},Australia={ACT:[10,"s","04/02:02->10/01:03"],Adelaide:[9.5,"s","04/02:02->10/01:03"],Brisbane:[10,"s"],Broken_Hill:[9.5,"s","04/02:02->10/01:03"],Canberra:[10,"s","04/02:02->10/01:03"],Currie:[10,"s","04/02:02->10/01:03"],Darwin:[9.5,"s"],Eucla:[8.75,"s"],Hobart:[10,"s","04/02:02->10/01:03"],LHI:[10.5,"s","04/02:01->10/01:02"],Lindeman:[10,"s"],Lord_Howe:[10.5,"s","04/02:01->10/01:02"],Melbourne:[10,"s","04/02:02->10/01:03"],NSW:[10,"s","04/02:02->10/01:03"],North:[9.5,"s"],Perth:[8,"s"],Queensland:[10,"s"],South:[9.5,"s","04/02:02->10/01:03"],Sydney:[10,"s","04/02:02->10/01:03"],Tasmania:[10,"s","04/02:02->10/01:03"],Victoria:[10,"s","04/02:02->10/01:03"],West:[8,"s"],Yancowinna:[9.5,"s","04/02:02->10/01:03"]},Brazil={Acre:[-5,"s"],DeNoronha:[-2,"s"],East:[-3,"s","02/18:23->10/15:01"],West:[-4,"s"]},Canada={Atlantic:[-3,"n","03/12:03->11/05:01"],Central:[-5,"n","03/12:03->11/05:01"],"East-Saskatchewan":[-6,"n"],Eastern:[-4,"n","03/12:03->11/05:01"],Mountain:[-6,"n","03/12:03->11/05:01"],Newfoundland:[-2.5,"n","03/12:03->11/05:01"],Pacific:[-7,"n","03/12:03->11/05:01"],Saskatchewan:[-6,"n"],Yukon:[-7,"n","03/12:03->11/05:01"]},Chile={Continental:[-3,"s","05/13:23->08/13:01"],EasterIsland:[-5,"s","05/13:21->08/12:23"]},Etc={GMT:[0,"n"],"GMT+0":[0,"n"],"GMT+1":[-1,"n"],"GMT+10":[-10,"n"],"GMT+11":[-11,"n"],"GMT+12":[-12,"n"],"GMT+2":[-2,"n"],"GMT+3":[-3,"n"],"GMT+4":[-4,"n"],"GMT+5":[-5,"n"],"GMT+6":[-6,"n"],"GMT+7":[-7,"n"],"GMT+8":[-8,"n"],"GMT+9":[-9,"n"],"GMT-0":[0,"n"],"GMT-1":[1,"n"],"GMT-10":[10,"n"],"GMT-11":[11,"n"],"GMT-12":[12,"n"],"GMT-13":[13,"n"],"GMT-14":[14,"n"],"GMT-2":[2,"n"],"GMT-3":[3,"n"],"GMT-4":[4,"n"],"GMT-5":[5,"n"],"GMT-6":[6,"n"],"GMT-7":[7,"n"],"GMT-8":[8,"n"],"GMT-9":[9,"n"],GMT0:[0,"n"],Greenwich:[0,"n"],UCT:[0,"n"],UTC:[0,"n"],Universal:[0,"n"],Zulu:[0,"n"]},Europe={Amsterdam:[2,"n","03/26:03->10/29:02"],Andorra:[2,"n","03/26:03->10/29:02"],Athens:[3,"n","03/26:04->10/29:03"],Belfast:[1,"n","03/26:02->10/29:01"],Belgrade:[2,"n","03/26:03->10/29:02"],Berlin:[2,"n","03/26:03->10/29:02"],Bratislava:[2,"n","03/26:03->10/29:02"],Brussels:[2,"n","03/26:03->10/29:02"],Bucharest:[3,"n","03/26:04->10/29:03"],Budapest:[2,"n","03/26:03->10/29:02"],Busingen:[2,"n","03/26:03->10/29:02"],Chisinau:[3,"n","03/26:03->10/29:02"],Copenhagen:[2,"n","03/26:03->10/29:02"],Dublin:[1,"n","03/26:02->10/29:01"],Gibraltar:[2,"n","03/26:03->10/29:02"],Guernsey:[1,"n","03/26:02->10/29:01"],Helsinki:[3,"n","03/26:04->10/29:03"],Isle_of_Man:[1,"n","03/26:02->10/29:01"],Istanbul:[3,"n"],Jersey:[1,"n","03/26:02->10/29:01"],Kaliningrad:[3,"n"],Kiev:[3,"n","03/26:04->10/29:03"],Lisbon:[1,"n","03/26:02->10/29:01"],Ljubljana:[2,"n","03/26:03->10/29:02"],London:[1,"n","03/26:02->10/29:01"],Luxembourg:[2,"n","03/26:03->10/29:02"],Madrid:[2,"n","03/26:03->10/29:02"],Malta:[2,"n","03/26:03->10/29:02"],Mariehamn:[3,"n","03/26:04->10/29:03"],Minsk:[3,"n"],Monaco:[2,"n","03/26:03->10/29:02"],Moscow:[3,"n"],Nicosia:[3,"n","03/26:04->10/29:03"],Oslo:[2,"n","03/26:03->10/29:02"],Paris:[2,"n","03/26:03->10/29:02"],Podgorica:[2,"n","03/26:03->10/29:02"],Prague:[2,"n","03/26:03->10/29:02"],Riga:[3,"n","03/26:04->10/29:03"],Rome:[2,"n","03/26:03->10/29:02"],Samara:[4,"n"],San_Marino:[2,"n","03/26:03->10/29:02"],Sarajevo:[2,"n","03/26:03->10/29:02"],Simferopol:[3,"n"],Skopje:[2,"n","03/26:03->10/29:02"],Sofia:[3,"n","03/26:04->10/29:03"],Stockholm:[2,"n","03/26:03->10/29:02"],Tallinn:[3,"n","03/26:04->10/29:03"],Tirane:[2,"n","03/26:03->10/29:02"],Tiraspol:[3,"n","03/26:03->10/29:02"],Uzhgorod:[3,"n","03/26:04->10/29:03"],Vaduz:[2,"n","03/26:03->10/29:02"],Vatican:[2,"n","03/26:03->10/29:02"],Vienna:[2,"n","03/26:03->10/29:02"],Vilnius:[3,"n","03/26:04->10/29:03"],Volgograd:[3,"n"],Warsaw:[2,"n","03/26:03->10/29:02"],Zagreb:[2,"n","03/26:03->10/29:02"],Zaporozhye:[3,"n","03/26:04->10/29:03"],Zurich:[2,"n","03/26:03->10/29:02"]},Indian={Antananarivo:[3,"s"],Chagos:[6,"n"],Christmas:[7,"n"],Cocos:[6.5,"n"],Comoro:[3,"n"],Kerguelen:[5,"s"],Mahe:[4,"n"],Maldives:[5,"n"],Mauritius:[4,"n"],Mayotte:[3,"n"],Reunion:[4,"s"]},Mexico={BajaNorte:[-7,"n","03/12:03->11/05:01"],BajaSur:[-6,"n","04/02:03->10/29:01"],General:[-5,"n","04/02:03->10/29:01"]},Pacific={Apia:[13,"s","04/02:03->09/24:04"],Auckland:[12,"s","04/02:02->09/24:03"],Chatham:[12.75,"s","04/02:02->09/24:03"],Chuuk:[10,"n"],Easter:[-6,"s","05/13:21->08/12:23"],Efate:[11,"n"],Enderbury:[13,"n"],Fakaofo:[13,"n"],Fiji:[12,"s","01/15:02->11/05:03"],Funafuti:[12,"n"],Galapagos:[-6,"n"],Gambier:[-9,"n"],Guadalcanal:[11,"n"],Guam:[10,"n"],Honolulu:[-10,"n"],Johnston:[-10,"n"],Kiritimati:[14,"n"],Kosrae:[11,"n"],Kwajalein:[12,"n"],Majuro:[12,"n"],Marquesas:[-9.5,"n"],Midway:[-11,"n"],Nauru:[12,"n"],Niue:[-11,"n"],Norfolk:[11.5,"n"],Noumea:[11,"n"],Pago_Pago:[-11,"n"],Palau:[9,"n"],Pitcairn:[-8,"n"],Pohnpei:[11,"n"],Ponape:[11,"n"],Port_Moresby:[10,"n"],Rarotonga:[-10,"n"],Saipan:[10,"n"],Samoa:[-11,"n"],Tahiti:[-10,"n"],Tarawa:[12,"n"],Tongatapu:[13,"s","01/15:02->11/05:03"],Truk:[10,"n"],Wake:[12,"n"],Wallis:[12,"n"],Yap:[10,"n"]},zonefile_2017={Africa:Africa,America:America,Antarctica:Antarctica,Arctic:Arctic,Asia:Asia,Atlantic:Atlantic,Australia:Australia,Brazil:Brazil,Canada:Canada,Chile:Chile,Etc:Etc,Europe:Europe,Indian:Indian,Mexico:Mexico,Pacific:Pacific},zonefile_2017$1=Object.freeze({Africa:Africa,America:America,Antarctica:Antarctica,Arctic:Arctic,Asia:Asia,Atlantic:Atlantic,Australia:Australia,Brazil:Brazil,Canada:Canada,Chile:Chile,Etc:Etc,Europe:Europe,Indian:Indian,Mexico:Mexico,Pacific:Pacific,default:zonefile_2017}),zonefile=zonefile_2017$1&&zonefile_2017||zonefile_2017$1,data_1=createCommonjsModule(function(module){const southern={Australia:!0,Chile:!0,Brazil:!0,Antarctica:!0},data=(obj=>{let all={};return Object.keys(obj).forEach(cont=>{Object.keys(obj[cont]).forEach(city=>{let tz=cont+"/"+city,arr=obj[cont][city];all[tz]={o:arr[0],h:arr[1]},arr[2]&&(all[tz].dst=arr[2]),!0===southern[cont]&&(all[tz].h="s")})}),all["Etc/UTC"]={o:0,h:"n"},all.UTC=all["Etc/UTC"],all})(zonefile);module.exports=data}),fns={isDate:isDate,isArray:isArray,isObject:isObject,zeroPad:zeroPad,titleCase:titleCase,ordinal:ordinal,normalize:normalize,getEpoch:getEpoch};const parseDst=dst=>dst?dst.split("->"):[];let o={millisecond:1};o.second=1e3,o.minute=6e4,o.hour=36e5,o.day=864e5,o.date=864e5,o.month=25488e5,o.week=6048e5,o.year=3154e7,Object.keys(o).forEach(k=>{o[k+"s"]=o[k]});const units={year:{valid:n=>n>-4e3&&n<4e3,walkTo:(s,n)=>{for(;s.year()<n;)s.epoch+=o.year;for(;s.year()>n;)s.epoch-=o.year}},month:{valid:n=>n>=0&&n<=11,walkTo:(s,n)=>{for(;s.month()<n;)s.epoch+=o.day;for(;s.month()>n;)s.epoch-=o.day}},date:{valid:n=>n>0&&n<=31,walkTo:(s,n)=>{for(;s.date()<n;)s.epoch+=o.day;for(;s.date()>n;)s.epoch-=o.day}},hour:{valid:n=>n>=0&&n<24,walkTo:(s,n)=>{for(;s.hour()<n;)s.epoch+=o.hour;for(;s.hour()>n;)s.epoch-=o.hour}},minute:{valid:n=>n>=0&&n<60,walkTo:(s,n)=>{for(;s.minute()<n;)s.epoch+=o.minute;for(;s.minute()>n;)s.epoch-=o.minute}},second:{valid:n=>n>=0&&n<60,walkTo:(s,n)=>{for(;s.second()<n;)s.epoch+=o.second;for(;s.second()>n;)s.epoch-=o.second}},millisecond:{valid:n=>n>=0&&n<1e3,walkTo:(s,n)=>{s.milliseconds(n)}}};let shortMonths=["jan","feb","mar","apr","may","jun","jul","aug","sept","oct","nov","dec"],longMonths=["january","february","march","april","may","june","july","august","september","october","november","december"];var months={short:()=>shortMonths,long:()=>longMonths,mapping:()=>buildMapping(),set:i18n=>{shortMonths=i18n.short,longMonths=i18n.long}};const parseHour=function(s,str){let arr=(str=str.replace(/^\s+/,"")).match(/([0-9]{1,2}):([0-9]{1,2}):?([0-9]{1,2})?[:\.]?([0-9]{1,4})?/);arr&&(s.hour(arr[1]),s.minute(arr[2]),arr[3]&&s.seconds(arr[3]),arr[4]&&s.millisecond(arr[4]))};var strFmt=[{reg:/^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})T([0-9:-\\.]+)(Z|[0-9\-\+:]+)?$/,parse:(s,arr)=>{let month=parseInt(arr[2],10)-1;walkTo(s,{year:arr[1],month:month,date:arr[3]}),parseHour(s,arr[4])}},{reg:/^([0-9]{4})[\-\/]([0-9]{1,2})[\-\/]([0-9]{1,2})$/,parse:(s,arr)=>{let month=parseInt(arr[2],10)-1,date=parseInt(arr[3],10);month>=12&&(date=parseInt(arr[2],10),month=parseInt(arr[3],10)-1),walkTo(s,{year:arr[1],month:month,date:date})}},{reg:/^([0-9]{1,2})[\-\/]([0-9]{1,2})[\-\/]([0-9]{4})$/,parse:(s,arr)=>{let month=parseInt(arr[1],10)-1,date=parseInt(arr[2],10);month>=12&&(month=parseInt(arr[2],10)-1,date=parseInt(arr[1],10)),walkTo(s,{year:arr[3],month:month,date:date})}},{reg:/^([a-z]+) ([0-9]{1,2}),? ([0-9]{4})( ([0-9:]+))?$/i,parse:(s,arr)=>{let month=months.mapping()[arr[1].toLowerCase()];walkTo(s,{year:arr[3],month:month,date:arr[2]}),arr[4]&&parseHour(s,arr[4])}},{reg:/^([0-9]{1,2}) ([a-z]+),? ([0-9]{4})$/i,parse:(s,arr)=>{let month=months.mapping()[arr[2].toLowerCase()];walkTo(s,{year:arr[3],month:month,date:arr[1]})}}];const handleArray=function(s,arr){let order=["year","month","date","hour","minute","second","millisecond"];for(let i=0;i<arr.length;i++){let num=arr[i]||0;s[order[i]](num)}return s},handleObject=function(s,obj){let keys=Object.keys(obj);for(let i=0;i<keys.length;i++){let unit=keys[i];if(void 0!==s[unit]){let num=obj[unit]||0;s[unit](num)}}return s};let shortDays=["sun","mon","tue","wed","thu","fri","sat"],longDays=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];var days={short:()=>shortDays,long:()=>longDays,set:i18n=>{shortDays=i18n.short,longDays=i18n.long}};const pad=fns.zeroPad,mapping={G:s=>s.era(),GG:s=>s.era(),GGG:s=>s.era(),GGGG:s=>"AD"===s.era()?"Anno Domini":"Before Christ",y:s=>s.year(),yy:s=>parseInt(String(s.year()).substr(2,4),10),yyy:s=>s.year(),yyyy:s=>s.year(),yyyyy:s=>"0"+s.year(),Q:s=>s.quarter(),QQ:s=>s.quarter(),QQQ:s=>s.quarter(),QQQQ:s=>s.quarter(),M:s=>s.month(),MM:s=>s.format("month-short"),MMM:s=>s.format("month"),MMMM:s=>s.format("month"),w:s=>s.week(),ww:s=>pad(s.week()),d:s=>s.date(),dd:s=>pad(s.date()),D:s=>s.dayOfYear(),DD:s=>pad(s.dayOfYear()),DDD:s=>pad(s.dayOfYear(),3),E:s=>s.format("day-short"),EE:s=>s.format("day-short"),EEE:s=>s.format("day-short"),EEEE:s=>s.format("day"),EEEEE:s=>s.format("day")[0],e:s=>s.day(),ee:s=>s.day(),eee:s=>s.format("day-short"),eeee:s=>s.format("day"),eeeee:s=>s.format("day")[0],a:s=>s.ampm().toUpperCase(),aa:s=>s.ampm().toUpperCase(),aaa:s=>s.ampm().toUpperCase(),aaaa:s=>s.ampm().toUpperCase(),h:s=>s.h12(),hh:s=>pad(s.h12()),H:s=>s.hour(),HH:s=>pad(s.hour()),m:s=>s.minute(),mm:s=>pad(s.minute()),s:s=>s.second(),ss:s=>pad(s.second()),A:s=>s.epoch-s.startOf("day").epoch,z:s=>s.timezone().name,zz:s=>s.timezone().name,zzz:s=>s.timezone().name,zzzz:s=>s.timezone().name,Z:s=>s.timezone().current.offset+"00",ZZ:s=>s.timezone().current.offset+"00",ZZZ:s=>s.timezone().current.offset+"00",ZZZZ:s=>s.timezone().current.offset+":00"},addAlias=function(char,to,n){let name=char,toName=to;for(let i=0;i<n;i+=1)mapping[name]=mapping[toName],name+=char,toName+=to};addAlias("q","Q",4),addAlias("L","M",4),addAlias("Y","y",4),addAlias("c","e",4),addAlias("k","H",2),addAlias("K","h",2),addAlias("S","s",2),addAlias("v","z",4),addAlias("V","Z",4);const fmt={day:s=>fns.titleCase(days.long()[s.day()]),"day-short":s=>fns.titleCase(days.short()[s.day()]),date:s=>""+s.date(),"date-ordinal":s=>fns.ordinal(s.date()),month:s=>fns.titleCase(months.long()[s.month()]),"month-short":s=>fns.titleCase(months.short()[s.month()]),time:s=>`${s.h12()}:${fns.zeroPad(s.minute())}${s.ampm()}`,"time-24h":s=>`${s.hour()}:${fns.zeroPad(s.minute())}`,year:s=>""+s.year(),"year-short":s=>"'"+(""+s.year()).substr(2,4),"numeric-us":s=>`${fns.zeroPad(s.month()+1)}/${fns.zeroPad(s.date())}/${s.year()}`,"numeric-uk":s=>`${fns.zeroPad(s.date())}/${fns.zeroPad(s.month()+1)}/${s.year()}`,"numeric-cn":s=>`${s.year()}/${fns.zeroPad(s.month()+1)}/${fns.zeroPad(s.date())}`,iso:s=>{let month=fns.zeroPad(s.month()+1),date=fns.zeroPad(s.date()),hour=fns.zeroPad(s.h24()),minute=fns.zeroPad(s.minute()),second=fns.zeroPad(s.second()),ms=fns.zeroPad(s.millisecond(),3);return`${s.year()}-${month}-${date}T${hour}:${minute}:${second}:${ms}Z`},"iso-short":s=>{let month=fns.zeroPad(s.month()+1),date=fns.zeroPad(s.date());return`${s.year()}-${month}-${date}`},"iso-utc":s=>new Date(s.epoch).toISOString()};fmt.nice=(s=>{return`${fmt.month(s)} ${fmt["date-ordinal"](s)}, ${fmt.time(s)}`}),fmt["nice-day"]=(s=>{return`${fmt.day(s)} ${fmt.month(s)} ${fmt["date-ordinal"](s)}, ${fmt.time(s)}`}),fmt["nice-short"]=(s=>{return`${fmt["month-short"](s)} ${fmt["date-ordinal"](s)}, ${fmt.time(s)}`}),fmt.full=(s=>{return`${fmt.day(s)} ${fmt.month(s)} ${fmt["date-ordinal"](s)}, ${s.year()}`}),fmt["full-short"]=(s=>{return`${fmt["day-short"](s)} ${fmt["month-short"](s)} ${fmt["date-ordinal"](s)}, ${s.year()}`}),fmt.ordinal=fmt["date-ordinal"],fmt["date-short"]=fmt.date,fmt["time-12h"]=fmt.time,fmt["time-12"]=fmt.time,fmt["time-h12"]=fmt["time-12h"],fmt["time-h24"]=fmt["time-24h"],fmt["time-24"]=fmt["time-24h"],fmt.numeric=fmt["numeric-us"],fmt.mdy=fmt["numeric-us"],fmt.dmy=fmt["numeric-uk"],fmt.ymd=fmt["numeric-cn"],fmt["little-endian"]=fmt["numeric-uk"],fmt["big-endian"]=fmt["numeric-cn"];var seasons={north:[["spring",2,1],["summer",5,1],["fall",8,1],["autumn",8,1],["winter",11,1]],south:[["fall",2,1],["autumn",2,1],["winter",5,1],["spring",8,1],["summer",11,1]]},quarters=[null,[0,1],[3,1],[6,1],[9,1]];const units$1={minute:s=>(walkTo(s,{second:0,millisecond:0}),s),quarterHour:s=>{let minute=s.minutes();return minute>=45?s.minutes(45):minute>=30?s.minutes(30):minute>=15?s.minutes(15):s.minutes(0),walkTo(s,{second:0,millisecond:0}),s},hour:s=>(walkTo(s,{minute:0,second:0,millisecond:0}),s),day:s=>(walkTo(s,{hour:0,minute:0,second:0,millisecond:0}),s),week:s=>{let original=s.clone();return s.day(1),s.isAfter(original)&&s.subtract(1,"week"),walkTo(s,{hour:0,minute:0,second:0,millisecond:0}),s},month:s=>(walkTo(s,{date:1,hour:0,minute:0,second:0,millisecond:0}),s),quarter:s=>{let q=s.quarter();return quarters[q]&&walkTo(s,{month:quarters[q][0],date:quarters[q][1],hour:0,minute:0,second:0,millisecond:0}),s},season:s=>{let current=s.season(),hem="north";"South"===s.timezone().hemisphere&&(hem="south");for(let i=0;i<seasons[hem].length;i++)if(seasons[hem][i][0]===current){let year=s.year();return"winter"===current&&s.month()<3&&(year-=1),walkTo(s,{year:year,month:seasons[hem][i][1],date:seasons[hem][i][2],hour:0,minute:0,second:0,millisecond:0}),s}return s},year:s=>(walkTo(s,{month:0,date:1,hour:0,minute:0,second:0,millisecond:0}),s)};units$1.date=units$1.day;const methods={set(input){return parseInput(this,input),this},timezone(){return timezone(this)},isDST(){return timezone(this).current.isDST},hasDST(){return timezone(this).hasDst},offset(){return timezone(this).current.offset/60},hemisphere(){return timezone(this).hemisphere},format(fmt){return format(this,fmt)},startOf(unit){return startOf(this,unit)},endOf(unit){return endOf(this,unit)},leapYear(){let year=this.year();return year%4==0&&year%100!=0||year%400==0},progress(){return progress(this)},nearest(unit){return nearest(this,unit)},diff(d,unit){return diff(this,d,unit)},isValid(){return this.valid&&!isNaN(this.d.getTime())},goto(tz){return this.tz=tz,this},isAsleep(){let hour=this.hour();return hour<8||hour>22},log(){return console.log(""),console.log(format(this,"nice-short")),this},logYear(){return console.log(""),console.log(format(this,"full-short")),this}};methods.inDST=methods.isDST,methods.round=methods.nearest;var monthLength=[31,28,31,30,31,30,31,31,30,31,30,31];const validate=function(n){return"string"==typeof n&&(n=parseInt(n,10)),n},order=["year","month","date","hour","minute","second","millisecond"],confirm=function(s,tmp,unit){let n=order.indexOf(unit),arr=order.slice(n,order.length);for(let i=0;i<arr.length;i++){let want=tmp[arr[i]]();s[arr[i]](want)}return s};var set={milliseconds(s,n){n=validate(n);let diff=s.millisecond()-n;return s.epoch-diff},seconds(s,n){n=validate(n);let shift=(s.second()-n)*o.second;return s.epoch-shift},minutes(s,n){n=validate(n);let old=s.clone(),shift=(s.minute()-n)*o.minute;return s.epoch-=shift,confirm(s,old,"second"),s.epoch},hours(s,n){n=validate(n);let old=s.clone(),shift=(s.hour()-n)*o.hour;return s.epoch-=shift,confirm(s,old,"minute"),s.epoch},time(s,str){let m=str.match(/([0-9]{1,2}):([0-9]{1,2})(am|pm)?/);if(!m){if(!(m=str.match(/([0-9]{1,2})(am|pm)/)))return s.epoch;m.splice(2,0,"0")}let h24=!1,hour=parseInt(m[1],10),minute=parseInt(m[2],10);return hour>12&&(h24=!0),!1===h24&&("am"===m[3]&&12===hour&&(hour=0),"pm"===m[3]&&hour<12&&(hour+=12)),s.hour(hour),s.minute(minute),s.second(0),s.millisecond(0),s.epoch},date:(s,n)=>(n=validate(n),walkTo(s,{date:n}),s.epoch),month(s,n){"string"==typeof n&&(n=months.mapping()[n.toLowerCase()]),n=validate(n);let date=s.date();return date>monthLength[n]&&(date=monthLength[n]),walkTo(s,{month:n,date:date}),s.epoch},year:(s,n)=>(n=validate(n),walkTo(s,{year:n}),s.epoch),dayOfYear(s,n){n=validate(n);let old=s.clone(),shift=(n-s.dayOfYear())*o.day;return s.epoch+=shift,confirm(s,old,"hour"),s.epoch}};let methods$2={millisecond:function(num){return void 0!==num?(this.epoch=set.milliseconds(this,num),this):this.d.getMilliseconds()},second:function(num){return void 0!==num?(this.epoch=set.seconds(this,num),this):this.d.getSeconds()},minute:function(num){return void 0!==num?(this.epoch=set.minutes(this,num),this):this.d.getMinutes()},hour:function(num){let d=this.d;return void 0!==num?(this.epoch=set.hours(this,num),this):d.getHours()},hour12:function(str){let d=this.d;if(void 0!==str){let m=(str=""+str).match(/^([0-9]+)(am|pm)$/);if(m){let hour=parseInt(m[1],10);"pm"===m[2]&&(hour+=12),this.epoch=set.hours(this,hour)}return this}let hour12=d.getHours();return hour12>12&&(hour12-=12),0===hour12&&(hour12=12),hour12},date:function(num){return void 0!==num?(this.epoch=set.date(this,num),this):this.d.getDate()},month:function(input){return void 0!==input?(this.epoch=set.month(this,input),this):this.d.getMonth()},year:function(num){return void 0!==num?(this.epoch=set.year(this,num),this):this.d.getFullYear()},dayTime:function(str){if(void 0!==str){const times={morning:"7:00am",breakfast:"7:00am",noon:"12:00am",lunch:"12:00pm",afternoon:"2:00pm",evening:"6:00pm",dinner:"6:00pm",night:"11:00pm",midnight:"23:59pm"};return str=str||"",str=str.toLowerCase(),times[str]&&this.time(times[str]),this}let h=this.hour();return h<6?"night":h<12?"morning":h<17?"afternoon":h<22?"evening":"night"},dayOfYear:function(num){if(void 0!==num)return this.epoch=set.dayOfYear(this,num),this;let tmp,sum=0,month=this.d.getMonth();for(let i=1;i<=month;i++)(tmp=new Date).setYear(this.d.getFullYear()),tmp.setMonth(i),tmp.setDate(1),tmp.setHours(-2),sum+=tmp.getDate();return sum+this.d.getDate()},era:function(str){if(void 0!==str){str=str.toLowerCase();let year=this.d.getFullYear();return"bc"===str&&year>0&&(this.epoch=set.year(this,-1*year)),"ad"===str&&year<0&&(this.epoch=set.year(this,-1*year)),this}return this.d.getFullYear()<0?"BC":"AD"}};methods$2.milliseconds=methods$2.millisecond,methods$2.seconds=methods$2.second,methods$2.minutes=methods$2.minute,methods$2.hours=methods$2.hour,methods$2.hour24=methods$2.hour,methods$2.h12=methods$2.hour12,methods$2.h24=methods$2.hour24,methods$2.days=methods$2.day;const clearMinutes=function(s){s.minute(0),s.second(0),s.millisecond(1)};var destructive={time:function(str){return void 0!==str?(this.epoch=set.time(this,str),this):this.format("time-h12")},week:function(num){if(void 0!==num)return this.month(0),this.date(1),this.day("monday"),clearMinutes(this),"december"===this.monthName()&&this.add(1,"week"),num-=1,this.add(num,"weeks"),this;let tmp=this.clone();tmp.month(0),tmp.date(1),clearMinutes(tmp),tmp.day("monday"),"december"===tmp.monthName()&&tmp.add(1,"week");const thisOne=this.epoch;if(tmp.epoch>thisOne)return 1;for(let i=0;i<52;i++){if(tmp.epoch>thisOne)return i;tmp.add(1,"week")}return 52},quarter:function(num){if(void 0!==num&&("string"==typeof num&&(num=num.replace(/^q/i,""),num=parseInt(num,10)),quarters[num])){let month=quarters[num][0];return this.month(month),this.date(1),this.hour(0),clearMinutes(this),this}let month=this.d.getMonth();for(let i=1;i<quarters.length;i++)if(month<quarters[i][0])return i-1;return 4},hourFloat:function(num){if(void 0!==num){let minute=num%1;minute*=60;let hour=parseInt(num,10);return this.epoch=set.hours(this,hour),this.epoch=set.minutes(this,minute),this}let d=this.d,hour=d.getHours(),minute=d.getMinutes();return minute/=60,hour+minute},season:function(input){let hem="north";if("South"===this.timezone().hemisphere&&(hem="south"),void 0!==input){for(let i=0;i<seasons[hem].length;i++)input===seasons[hem][i][0]&&(this.month(seasons[hem][i][1]),this.date(1),this.hour(0),clearMinutes(this));return this}let month=this.d.getMonth();for(let i=0;i<seasons[hem].length-1;i++)if(month>=seasons[hem][i][1]&&month<seasons[hem][i+1][1])return seasons[hem][i][0];return"winter"}},tricky={day:function(input){if(void 0===input)return this.d.getDay();let original=this.clone(),want=input;"string"==typeof input&&(input=input.toLowerCase(),-1===(want=days.short().indexOf(input))&&(want=days.long().indexOf(input)));let diff=this.d.getDay()-want,s=this.subtract(24*diff,"hours");return walkTo(s,{hour:original.hour(),minute:original.minute(),second:original.second()}),this.epoch=s.epoch,s},ampm:function(input){let which="am";return this.hour()>=12&&(which="pm"),void 0===input?which:input===which?this:("am"===input?this.subtract(12,"hours"):this.add(12,"hours"),this)},dayName:function(input){return void 0===input?days.long()[this.day()]:(this.day(input),this)},monthName:function(input){return void 0===input?months.long()[this.month()]:(this.month(input),this)}};const order$1=["millisecond","second","minute","hour","date","month"];let keep={second:order$1.slice(0,1),minute:order$1.slice(0,2),quarterhour:order$1.slice(0,2),hour:order$1.slice(0,3),date:order$1.slice(0,4),month:order$1.slice(0,4),quarter:order$1.slice(0,4),season:order$1.slice(0,4),year:order$1};keep.week=keep.date,keep.season=keep.date,keep.quarter=keep.date;const keepDate={month:!0,quarter:!0,season:!0,year:!0},print={millisecond:s=>s.epoch,second:s=>[s.year(),s.month(),s.date(),s.hour(),s.minute(),s.second()].join("-"),minute:s=>[s.year(),s.month(),s.date(),s.hour(),s.minute()].join("-"),hour:s=>[s.year(),s.month(),s.date(),s.hour()].join("-"),day:s=>[s.year(),s.month(),s.date()].join("-"),week:s=>[s.year(),s.week()].join("-"),month:s=>[s.year(),s.month()].join("-"),quarter:s=>[s.year(),s.quarter()].join("-"),year:s=>s.year()};print.date=print.day,Object.keys(methods).forEach(k=>{SpaceTime.prototype[k]=methods[k]}),SpaceTime.prototype.clone=function(){return new SpaceTime(this.epoch,this.tz)},addMethods(SpaceTime),addMethods$1(SpaceTime),addMethods$2(SpaceTime),addMethods$3(SpaceTime),addMethods$4(SpaceTime);const main=(input,tz)=>new SpaceTime(input,tz);main.whereIts=whereIts,main.now=function(tz){return new SpaceTime((new Date).getTime(),tz)},main.today=function(tz){return new SpaceTime((new Date).getTime(),tz).startOf("day")},main.tomorrow=function(tz){return new SpaceTime((new Date).getTime(),tz).add(1,"day").startOf("day")},main.yesterday=function(tz){return new SpaceTime((new Date).getTime(),tz).subtract(1,"day").startOf("day")},ImmutableSpacetime.whereIts=whereIts,ImmutableSpacetime.now=function(tz){var instance=clobber(new SpaceTime((new Date).getTime(),tz));return instance.clone=(x=>clobber(new SpaceTime((new Date).getTime(),tz))),instance},ImmutableSpacetime.today=function(tz){var instance=clobber((new Date).getTime(),tz);return instance.clone=(x=>clobber((new Date).getTime(),tz)),instance},ImmutableSpacetime.tomorrow=function(tz){var instance=clobber(new SpaceTime((new Date).getTime(),tz).add(1,"day").startOf("day"));return instance.clone=(x=>{return clobber(new SpaceTime((new Date).getTime(),tz).add(1,"day").startOf("day"))}),instance},ImmutableSpacetime.yesterday=function(tz){let instance=clobber(new SpaceTime((new Date).getTime(),tz).subtract(1,"day").startOf("day"));return instance.clone=(x=>{return clobber(new SpaceTime((new Date).getTime(),tz).subtract(1,"day").startOf("day"))}),instance};var index={Spacetime:main,ImmutableSpacetime:ImmutableSpacetime};export default index;